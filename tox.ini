[tox]
envlist = python
isolated_build = true
minversion = 3.23.0

[testenv]
description = Run test suite
commands =
  {envpython} -m \
    pytest \
    {tty:--color=yes} \
    --cov-config={toxinidir}/.coveragerc \
    --cov={envsitepackagesdir}/ansible_pygments \
    {posargs:}
deps =
  pytest
  pytest-cov
  # pytest-xdist
isolated_build = true
usedevelop = false


[testenv:cleanup-dists]
description =
  Wipe the the dist{/} folder
# NOTE: `package_env = none` is needed so it's possible to use `--installpkg`
# NOTE: with the main `testenv`.
# Ref: https://github.com/tox-dev/tox/issues/2442
package_env = ❌ DUMMY NON-EXISTENT ENV NAME ❌
usedevelop = false
skip_install = true
deps =
commands =
  {envpython} -c \
    "import shutil, sys; \
    shutil.rmtree(sys.argv[1], ignore_errors=True)" \
    {toxinidir}{/}dist{/}


[testenv:build-dists]
description =
  Build dists and put them into the dist{/} folder
depends =
  cleanup-dists
isolated_build = true
# NOTE: `package_env = none` is needed so it's possible to use `--installpkg`
# NOTE: with the main `testenv`.
# Ref: https://github.com/tox-dev/tox/issues/2442
package_env = ❌ DUMMY NON-EXISTENT ENV NAME ❌
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
  build ~= 0.9.0
passenv =
  PEP517_BUILD_ARGS
commands =
  {envpython} -m build \
    --outdir '{toxinidir}{/}dist{/}' \
    {posargs:{env:PEP517_BUILD_ARGS:}} \
    '{toxinidir}'


[testenv:metadata-validation]
description =
  Verify that dists under the `dist{/}`
  dir have valid metadata
depends =
  build-dists
deps =
  twine
# NOTE: `package_env = none` is needed so it's possible to use `--installpkg`
# NOTE: with the main `testenv`.
# Ref: https://github.com/tox-dev/tox/issues/2442
package_env = ❌ DUMMY NON-EXISTENT ENV NAME ❌
usedevelop = false
skip_install = true
commands =
  twine check {toxinidir}{/}dist{/}*


[testenv:lint]
description = Run the quality checks
commands =
  {envpython} -m \
    pre_commit run \
    --show-diff-on-failure \
    --hook-stage manual \
    {posargs:--all-files}

  # Print out the advice on how to install pre-commit from this env into Git:
  -{envpython} -c \
  'cmd = "{envpython} -m pre_commit install"; \
  scr_width = len(cmd) + 10; sep = "=" * scr_width; \
  cmd_str = "    $ " + cmd; \
  print(\
  "\n" + sep + "\nTo install pre-commit hooks into the Git repo, run:\n\n" + \
  cmd_str + "\n\n" + sep + "\n"\
  )'
deps =
  pre-commit >= 2.6.0
  pylint >= 2.5.3
isolated_build = true
