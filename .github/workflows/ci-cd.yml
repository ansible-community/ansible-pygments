---
name: CI/CD

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:
    inputs:
      release-version:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-version
        description: >-
          Target PEP440-compliant version to release.
          Please, don't prepend `v`.
        required: true
      release-commitish:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-committish
        default: ''
        description: >-
          The commit to be released to PyPI and tagged
          in Git as `release-version`. Normally, you
          should keep this empty.
      YOLO:
        default: false
        description: >-
          Flag whether test results should block the
          release (true/false). Only use this under
          extraordinary circumstances to ignore the
          test failures and cut the release regardless.
  # Run once per week (Monday at 06:00 UTC)
  schedule:
  - cron: 0 6 * * 1

jobs:
  lint:
    name: >-
      Linters @ py${{ matrix.python-version }}
      @ ${{ matrix.os }}
    needs:
    - pre-setup
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os:
        - Ubuntu
        python-version:
        - 3.9

    env:
      PY_COLORS: 1
      TOXENV: lint
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: >-
        Switch to using Python v${{ matrix.python-version }}
        by default
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      id: calc_cache_key_py
      run: |
        from hashlib import sha512
        from sys import version

        hash = sha512(version.encode()).hexdigest()
        print(f'::set-output name=py_hash_key::{hash}')
      shell: python
    - name: Get pip cache dir
      id: pip-cache
      run: >-
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Set up pip cache
      uses: actions/cache@v2.1.5
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc_cache_key_py.outputs.py_hash_key }}-${{
          needs.pre-setup.outputs.cache_key_files }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc_cache_key_py.outputs.py_hash_key
          }}-
          ${{ runner.os }}-pip-
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox

    - name: Grab the source from Git
      uses: actions/checkout@v2

    - name: Pre-populate tox env
      run: >-
        python -m
        tox
        -p auto
        --parallel-live -vvvv
        --skip-missing-interpreters false
        --notest
    - name: Run linters
      run: >-
        python -m
        tox
        -p auto
        --parallel-live -vvvv
        --skip-missing-interpreters false

  pre-setup:
    name: Pre-set global build settings
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: python
    outputs:
      dist_version: >-
        ${{
            steps.tagged_check.outputs.release_requested == 'true'
            && github.event.inputs.release-version
            || steps.scm_version.outputs.dist_version
        }}
      is_untagged_devel: >-
        ${{ steps.not_tagged_check.outputs.is_untagged_devel || false }}
      release_requested: >-
        ${{
            steps.tagged_check.outputs.release_requested || false
        }}
      cache_key_files: >-
        ${{ steps.calc_cache_key_files.outputs.files_hash_key }}
      git_tag: ${{ steps.git_tag.outputs.tag }}
      sdist_artifact_name: ${{ steps.artifact_name.outputs.sdist }}
      wheel_artifact_name: ${{ steps.artifact_name.outputs.wheel }}
    steps:
    - name: Switch to using Python 3.9 by default
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: >-
        Mark the build as non-tagged
        ${{ github.event.repository.default_branch }} build
      id: not_tagged_check
      if: >-
        github.event_name == 'push' &&
        github.ref == format(
          'refs/heads/{0}', github.event.repository.default_branch
        )
      run: >-
        print('::set-output name=is_untagged_devel::true')
    - name: Mark the build as tagged
      id: tagged_check
      if: github.event_name == 'workflow_dispatch'
      run: >-
        print('::set-output name=release_requested::true')
    - name: Check out src from Git
      if: >-
        steps.tagged_check.outputs.release_requested != 'true'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.release-committish }}
    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      if: >-
        steps.tagged_check.outputs.release_requested != 'true'
      id: calc_cache_key_py
      run: |
        from hashlib import sha512
        from sys import version
        hash = sha512(version.encode()).hexdigest()
        print(f'::set-output name=py_hash_key::{hash}')
    - name: >-
        Calculate dependency files' combined hash value
        for use in the cache key
      if: >-
        steps.tagged_check.outputs.release_requested != 'true'
      id: calc_cache_key_files
      run: |
        from hashlib import sha512
        hashes_combo = sha512('-'.join((
          "${{ hashFiles('tox.ini')}}",
          "${{ hashFiles('pyproject.toml') }}",
          "${{ hashFiles('.pre-commit-config.yaml') }}",
          "${{ hashFiles('pytest.ini') }}",
        )).encode()).hexdigest()
        print(f'::set-output name=files_hash_key::{hashes_combo}')
    - name: Set up pip cache
      if: >-
        steps.tagged_check.outputs.release_requested != 'true'
      uses: actions/cache@v2.1.5
      with:
        path: >-
          ${{
              runner.os == 'Linux'
              && '~/.cache/pip'
              || '~/Library/Caches/pip'
          }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc_cache_key_py.outputs.py_hash_key }}-${{
          steps.calc_cache_key_files.outputs.files_hash_key }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc_cache_key_py.outputs.py_hash_key
          }}-
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Drop Git tags from HEAD for non-tag-create events
      if: >-
        steps.tagged_check.outputs.release_requested != 'true'
      run: >-
        git tag --points-at HEAD
        |
        xargs git tag --delete
      shell: bash
    - name: Set up versioning prerequisites
      if: >-
        steps.tagged_check.outputs.release_requested != 'true'
      run: >-
        python -m
        pip install
        --user
        setuptools-scm
      shell: bash
    - name: Set the current dist version from Git
      if: steps.tagged_check.outputs.release_requested != 'true'
      id: scm_version
      run: |
        import setuptools_scm
        ver = setuptools_scm.get_version(
          ${{
              steps.not_tagged_check.outputs.is_untagged_devel == 'true'
              && 'local_scheme="no-local-version"' || ''
          }}
        )
        print('::set-output name=dist_version::{ver}'.format(ver=ver))
    - name: Set the target Git tag
      id: git_tag
      run: >-
        print('::set-output name=tag::v${{
            steps.tagged_check.outputs.release_requested == 'true'
            && github.event.inputs.release-version
            || steps.scm_version.outputs.dist_version
        }}')
    - name: Set the expected dist artifact names
      id: artifact_name
      run: |
        print('::set-output name=sdist::ansible-pygments-${{
            steps.tagged_check.outputs.release_requested == 'true'
            && github.event.inputs.release-version
            || steps.scm_version.outputs.dist_version
        }}.tar.gz')
        print('::set-output name=wheel::ansible_pygments-${{
            steps.tagged_check.outputs.release_requested == 'true'
            && github.event.inputs.release-version
            || steps.scm_version.outputs.dist_version
        }}-py3-none-any.whl')

  build:
    name: >-
      🏗 sdist & wheel 📦
      v${{ needs.pre-setup.outputs.dist_version }}
    needs:
    - pre-setup
    runs-on: ubuntu-latest

    env:
      PY_COLORS: 1
      TOXENV: cleanup-dists,build-dists,metadata-validation
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Switch to using Python 3.9 by default
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      id: calc_cache_key_py
      run: |
        from hashlib import sha512
        from sys import version

        hash = sha512(version.encode()).hexdigest()
        print(f'::set-output name=py_hash_key::{hash}')
      shell: python
    - name: Get pip cache dir
      id: pip-cache
      run: >-
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Set up pip cache
      uses: actions/cache@v2.1.5
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc_cache_key_py.outputs.py_hash_key }}-${{
          needs.pre-setup.outputs.cache_key_files }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc_cache_key_py.outputs.py_hash_key
          }}-
          ${{ runner.os }}-pip-
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox

    - name: Grab the source from Git
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.release-committish }}
    - name: >-
        Update the project version to ${{
            needs.pre-setup.outputs.dist_version
        }}, in-tree
      run: >-
        sed -i
        's#^\(version\s\+=\s\+\).*#\1"${{
            needs.pre-setup.outputs.dist_version
        }}"#'
        pyproject.toml
    - name: Pre-populate tox env
      run: >-
        python -m
        tox
        -p auto
        --parallel-live -vvvv
        --skip-missing-interpreters false
        --notest
    - name: Build dists and verify their metadata
      run: >-
        python -m
        tox
        -p auto
        --parallel-live -vvvv
        --skip-missing-interpreters false

    - name: Store the Python package distributions
      uses: actions/upload-artifact@v2
      with:
        name: python-package-distributions
        # NOTE: Exact expected file names are specified here
        # NOTE: as a safety measure — if anything weird ends
        # NOTE: up being in this dir or not all dists will be
        # NOTE: produced, this will fail the workflow.
        path: |
          dist/${{ needs.pre-setup.outputs.sdist_artifact_name }}
          dist/${{ needs.pre-setup.outputs.wheel_artifact_name }}
        retention-days: 4

  tests:
    name: >-
      🐍${{
          matrix.python-version
      }} / ${{
          matrix.tested-artifact
      }} @ ${{
          matrix.os
      }}
    needs:
    - build
    - pre-setup  # transitive, for accessing settings
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os:
        - Ubuntu
        - macOS
        - Windows
        python-version:
        - 3.9
        - pypy-3.7
        - 3.6
        - 3.8
        - 3.7
        - 3.10.0-alpha - 3.10.0
        - pypy-3.6
        tested-artifact:
        - wheel
        - sdist
        exclude:
        - os: Windows
          python-version: pypy-3.6
        - os: macOS
          python-version: pypy-3.6

    continue-on-error: >-
      ${{
          (
            needs.pre-setup.outputs.release_requested == 'true' &&
            !toJSON(github.event.inputs.YOLO)
          ) && true || false
      }}

    env:
      ARTIFACT_NAME: >-
        ${{
            matrix.tested-artifact == 'wheel'
            && needs.pre-setup.outputs.wheel_artifact_name
            || needs.pre-setup.outputs.sdist_artifact_name
        }}
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
      PIP_NO_WARN_SCRIPT_LOCATION: 1
      PY_COLORS: 1
      TOXENV: python
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      id: calc_cache_key_py
      run: |
        from hashlib import sha512
        from sys import version

        hash = sha512(version.encode()).hexdigest()
        print(f'::set-output name=py_hash_key::{hash}')
      shell: python
    - name: Get pip cache dir
      id: pip-cache
      run: >-
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Set up pip cache
      uses: actions/cache@v2.1.5
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc_cache_key_py.outputs.py_hash_key }}-${{
          needs.pre-setup.outputs.cache_key_files }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc_cache_key_py.outputs.py_hash_key
          }}-
          ${{ runner.os }}-pip-
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox

    - name: Grab the source from Git
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.release-committish }}
    - name: Download all the dists
      uses: actions/download-artifact@v2
      with:
        name: python-package-distributions
        path: dist/

    - name: Pre-populate tox env
      run: >-
        python -m
        tox
        -p auto
        --parallel-live -vvvv
        --skip-missing-interpreters false
        --notest
        --installpkg 'dist/${{ env.ARTIFACT_NAME }}'

    - name: Run tests
      run: >-
        python -m
        tox
        -p auto
        --parallel-live -vvvv
        --skip-missing-interpreters false
        --skip-pkg-install
    - name: Send coverage data to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: .test-results/pytest/cov.xml
        flags: >-
          GHA,
          ${{ runner.os }},
          ${{ matrix.python-version }},
          ${{ env.ARTIFACT_NAME }}

  publish:
    name: Publish 🐍📦 to (Test)PyPI
    needs:
    - pre-setup  # transitive, for accessing settings
    - tests
    if: >-
      fromJSON(needs.pre-setup.outputs.is_untagged_devel) ||
      fromJSON(needs.pre-setup.outputs.release_requested)
    runs-on: ubuntu-latest

    steps:
    - name: Check out src from Git
      if: fromJSON(needs.pre-setup.outputs.release_requested)
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup git user as [bot]
      if: fromJSON(needs.pre-setup.outputs.release_requested)
      run: >
        git config --local user.email
        'github-actions[bot]@users.noreply.github.com'

        git config --local user.name 'github-actions[bot]'

    - name: >-
        Tag the release in the local Git repo
        as ${{ needs.pre-setup.outputs.git_tag }}
      if: fromJSON(needs.pre-setup.outputs.release_requested)
      run: >-
        git tag '${{ needs.pre-setup.outputs.git_tag }}'
        ${{ github.event.inputs.release-committish }}
    - name: Download all the dists
      uses: actions/download-artifact@v2
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish 🐍📦  ${{ needs.pre-setup.outputs.git_tag }}to TestPyPI
      if: >-
        fromJSON(needs.pre-setup.outputs.is_untagged_devel) ||
        fromJSON(needs.pre-setup.outputs.release_requested)
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TESTPYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish 🐍📦 ${{ needs.pre-setup.outputs.git_tag }} to PyPI
      if: fromJSON(needs.pre-setup.outputs.release_requested)
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    - name: >-
        Push ${{ needs.pre-setup.outputs.git_tag }} tag corresponding
        to the just published release back to GitHub
      if: fromJSON(needs.pre-setup.outputs.release_requested)
      run: >-
        git push --atomic origin '${{ needs.pre-setup.outputs.git_tag }}'
...
